// <editor-fold defaultstate="collapsed" desc="Define et configurations">
#include "p24FJ64GA002.h"

_CONFIG1 (JTAGEN_OFF& GCP_OFF &GWRP_OFF& ICS_PGx2& FWDTEN_OFF& WINDIS_OFF)
 _CONFIG2 (0x7987)
  // </editor-fold>

// <editor-fold defaultstate="collapsed" desc="Initialisations SFR">
 void InitRPs()
{
    // Unlock registers
    asm volatile ( 	"MOV #OSCCON,W1 \n"
                    "MOV #0x46,W2	\n"
                    "MOV #0x57,W3	\n"
                    "MOV.b W2,[W1]	\n"
                    "MOV.b W3,[W1]	\n"
                    "BCLR OSCCON,#6");

	_RP3R = 3;		// Assign TX to RP3 (0x3) (pin 7)
	_U1RXR = 2;             //Assing Rx to RP2/RB2 (pin 6)

    // Lock registers
    asm volatile ( 	"MOV #OSCCON,W1 \n"
                    "MOV #0x46,w2	\n"
                    "MOV #0x57,w3	\n"
                    "MOV.b W2,[W1]	\n"
                    "MOV.b W3,[W1]	\n"
                    "BSET OSCCON,#6");
}

void InitFunct()
{
    AD1PCFG = 0xFFFF;
    TRISA = 0x001C;
    TRISB = 0xFFF4;

    // Configuration du port série (UART)
	U1BRG  = 51;
	_U1RXIP = 3;
	U1STA  = 0x2000;	// Interruption à chaque caractère reçu
	U1MODE = 0x8000;
	U1STAbits.UTXEN = 1;
	_U1RXIF = 0;
	_U1RXIE = 1;
//         On set les CN
        CNEN1 = 0xF803;
        CNEN2 = 0x69E1;
//on met des pull up sur nos cn utilisées
        CNPU1 = 0xF803;
        CNPU2 = 0x69E1;
        _CNIE = 1;
        _CNIF = 0;
        _CNIP = 4;

        T2CON = 0x8020;
        PR2 = 31250;
        _T2IF = 0;
        _T2IP = 2;
        _T2IE = 1;

}
  // </editor-fold>

unsigned char etapeReception=0;

void Envoi( char b)
{
    	while(U1STAbits.UTXBF);
	U1TXREG = b;
}

void VerificationDesPattes()
{
//On fait un condensé de l'état des pattes sur un octet
//On place les pattes dans l'ordre croissant de leur num sur le port et en partant du port A
    unsigned int condense=0;
    unsigned int portBDecalle=0;
    unsigned int portADecalle=0;
    //condense = ((PORTA&0x001C)>>2)|((PORTB&0xFFF0)>>1);
    portBDecalle = (PORTB&0xFFF0)>>1;
    portADecalle = (PORTA&0x001C)>>2;
    condense = portBDecalle|portADecalle;
    Envoi('T');//Byte de synchro
//    Envoi('Q');
//    Envoi('R');
//
    Envoi(condense>>8);
    Envoi(condense);
//      Envoi(portADecalle>>8);
//      Envoi(portADecalle);
//      Envoi(portBDecalle>>8);
//      Envoi(portBDecalle);
}

int main()
{
    InitRPs();
    InitFunct();
    while (1) {}
}

void __attribute__((__interrupt__,auto_psv)) _U1RXInterrupt(void)
{
    unsigned char c;
    c = U1RXREG;

    switch(etapeReception)
    {
        case 0:
            if(c == 'T') ++etapeReception;
            break;
        case 1:
            switch(c)
            {
                case 'P':
                    VerificationDesPattes();
                    etapeReception=0;
                    break;
            }
            break;
    }
    
    _U1RXIF = 0;
}

void __attribute__((__interrupt__,auto_psv)) _CNInterrupt(void)
{
//   VerificationDesPattes();
    _CNIF = 0;
}

void __attribute__((__interrupt__,auto_psv)) _T2Interrupt(void)
{
    VerificationDesPattes();
    _T2IF = 0;
}
